{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","class","businesses","map","SearchBar","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","sortByOptions","sortByOption","setState","event","target","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","key","getSortByClass","onClick","handleSortByChange","renderSortByOptions","onChange","placeholder","App","console","log","seachYelp","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e0f13b0e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Business.css';\r\n\r\n\r\nclass Business extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Business\">\r\n                <div className=\"image-container\">\r\n                    <img src={this.props.business.imageSrc} alt='' />\r\n                </div>\r\n                <h2>{this.props.business.name}</h2>\r\n                <div className=\"Business-information\">\r\n                    <div className=\"Business-address\">\r\n                        <p>{this.props.business.address}</p>\r\n                        <p>{this.props.business.city}</p>\r\n                        <p>{this.props.business.state} {this.props.business.zipCode}</p>\r\n                    </div>\r\n                    <div className=\"Business-reviews\">\r\n                        <h3>{this.props.business.category}</h3>\r\n                        <h3 className=\"rating\">{this.props.business.rating}</h3>\r\n                        <p>{this.props.business.reviewCount}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Business;","import React from 'react';\r\nimport './BusinessList.css';\r\nimport Business from '../Business/Business';\r\n\r\nclass BusinessList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div class=\"BusinessList\">\r\n                {this.props.businesses.map(business => {\r\n                    return <Business business={business} />\r\n                })}\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default BusinessList;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            term: \"\",\r\n            location: \"\",\r\n            sortBy: \"best_match\"\r\n         };\r\n\r\n         this.handleTermChange = this.handleTermChange.bind(this);\r\n         this.handleLocationChange = this.handleLocationChange.bind(this);\r\n         this.handleSearch = this.handleSearch.bind(this);\r\n\r\n         this.sortByOptions = {\r\n            'Best Match': 'best_match',\r\n            'Highest Rated': 'rating',\r\n            'Most Reviewed': 'review_count'\r\n        };\r\n        \r\n    }\r\n\r\n    getSortByClass(sortByOption) {\r\n        if (this.state.sortBy === sortByOption) {\r\n            return \"active\";\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    handleSortByChange(sortByOption) {\r\n        this.setState({sortBy: sortByOption});\r\n    }\r\n\r\n    handleTermChange(event) {\r\n        this.setState({term: event.target.value});\r\n    }\r\n\r\n    handleLocationChange(event) {\r\n        this.setState({location: event.target.value});\r\n    }\r\n\r\n    handleSearch(event) {\r\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n        event.preventDefault();\r\n    }\r\n\r\n    renderSortByOptions() {\r\n        return Object.keys(this.sortByOptions).map(sortByOption => {\r\n            let sortByOptionValue = this.sortByOptions[sortByOption];\r\n            return <li key={sortByOptionValue} className={this.getSortByClass(sortByOptionValue)} onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>{sortByOption}</li>\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <div className=\"SearchBar-sort-options\">\r\n                    <ul>\r\n                        {this.renderSortByOptions()}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"SearchBar-fields\">\r\n                    <input onChange={this.handleTermChange} placeholder=\"Search Businesses\" />\r\n                    <input onChange={this.handleLocationChange} placeholder=\"Where?\" />\r\n                </div>\r\n                <div className=\"SearchBar-submit\">\r\n                    <a onClick={this.handleSearch}>Let's Go</a>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\n\nlet business = {\n  imageSrc: 'https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg',\n  name: 'MarginOtto Pizzeria',\n  address: '1010 Paddington Way',\n  city: 'Flavortown',\n  state: 'NY',\n  zipCode: '10101',\n  category: 'Italian',\n  rating: 4.5,\n  reviewCount: 90\n}\n\nlet businesses = [business, business, business, business, business]\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  searchYelp(term, location, sortBy) {\n    console.log(`Searching Yelp with ${term}, ${location}, ${sortBy}`)\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <h1>ravenous</h1>\n        <SearchBar searchYelp={this.seachYelp}/>\n        <BusinessList businesses={businesses}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}